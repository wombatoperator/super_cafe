{
  "version": "2.0",
  "dataset_hash": "870b2c45c25b",
  "updated": "2025-07-13T17:51:02.731655",
  "features": [
    {
      "code": "# Create a new feature that combines family size and passenger class to encode social dynamics\ndf['FamilySize'] = df['SibSp'] + df['Parch'] + 1  # Total family size including the passenger\ndf['SocialNetworkImpact'] = (df['FamilySize'] * df['Pclass']).astype(float)  # Interaction term capturing family size and class\n\n# Normalize the new feature to ensure it captures relative impact\ndf['SocialNetworkImpact'] = (df['SocialNetworkImpact'] - df['SocialNetworkImpact'].mean()) / df['SocialNetworkImpact'].std()\n\n# Handle NaN values gracefully\ndf['SocialNetworkImpact'].fillna(0, inplace=True)",
      "description": "The survival of passengers on the Titanic may be influenced not only by individual characteristics but also by their social network structure. Passengers traveling in groups (family or friends) may have different survival probabilities compared to those traveling alone. By analyzing the composition of these groups and their characteristics, we can gain insights into how social dynamics impacted survival rates.",
      "feature_name": "FamilySize",
      "improvement": 0.008939667391877903,
      "baseline_roc": 0.8550327993143458,
      "enhanced_roc": 0.8639724667062237,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:44:25.541990",
      "feature_type": "ratio",
      "complexity": "complex",
      "relative_improvement": 1.0455350249775983,
      "impact_score": 0.10235625948739266
    },
    {
      "code": "# Create the advanced feature\ndf['SocioEconomicSurvivalScore'] = (\n    (df['Fare'] / (df['Pclass'] + 1)) * \n    (1 / (df['FamilySize'] + 1))\n).fillna(0)",
      "description": "The survival of passengers on the Titanic may be influenced by their socio-economic status, which can be inferred from their ticket fare relative to their passenger class and family size. Passengers with higher fare in conjunction with lower family size may indicate a higher socio-economic status that could correlate with better survival rates. This feature captures the interaction of these variables in a non-linear manner, reflecting the relative advantage in survival likelihood based on fare, class, and family size.",
      "feature_name": "SocioEconomicSurvivalScore",
      "improvement": 0.005946523931961822,
      "baseline_roc": 0.8639724667062237,
      "enhanced_roc": 0.8699189906381856,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:44:33.387921",
      "feature_type": "ratio",
      "complexity": "complex",
      "relative_improvement": 0.6882770182054675,
      "impact_score": 0.06755414914098996
    },
    {
      "code": "# Create a new feature that clusters passengers based on their fare and family size\ndf['FamilySize'] = df['SibSp'] + df['Parch'] + 1  # Include the passenger themselves\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(df[['Fare', 'FamilySize']].fillna(0))  # Handle NaN by filling with 0\n\n# Using KMeans clustering to identify groups of passengers\nkmeans = KMeans(n_clusters=5, random_state=42)  # Choosing 5 clusters for diversity\ndf['PassengerCluster'] = kmeans.fit_predict(scaled_features)\n\n# Clean up by dropping the temporary feature used for clustering\ndf.drop(columns=['FamilySize'], inplace=True)",
      "description": "Passengers traveling in close proximity to each other (based on ticket fare and family size) may have shared survival outcomes, as they could have influenced each other's decisions during the evacuation. Thus, understanding the clustering of passengers based on fare and family size may reveal hidden patterns in survival rates.",
      "feature_name": "PassengerCluster",
      "improvement": 0.004386908293776415,
      "baseline_roc": 0.8550327993143458,
      "enhanced_roc": 0.8594197076081223,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:45:05.773069",
      "feature_type": "arithmetic",
      "complexity": "complex",
      "relative_improvement": 0.513069007094733,
      "impact_score": 0.05022866108789861
    },
    {
      "code": "# Create a new feature that combines family size (SibSp + Parch) with Pclass to capture complex interactions\ndf['FamilySize'] = df['SibSp'] + df['Parch']\ndf['FamilyFareClass'] = df['FamilySize'].astype(str) + '_' + df['Pclass'].astype(str)\n\n# Encode this new feature into numerical categories\ndf['FamilyFareClassEncoded'] = pd.factorize(df['FamilyFareClass'])[0]\n\n# Drop the intermediate 'FamilyFareClass' column to keep the DataFrame clean\ndf.drop(columns=['FamilyFareClass'], inplace=True)",
      "description": "Passengers who traveled with specific combinations of family members (SibSp and Parch) and their fare class may exhibit distinct survival patterns due to social dynamics and resource allocation during the disaster. By capturing the interaction between family size and fare class, we can identify groups with potentially different survival probabilities based on their social structure and economic status.",
      "feature_name": "FamilySize",
      "improvement": 0.010678113462552763,
      "baseline_roc": 0.8594197076081223,
      "enhanced_roc": 0.870097821070675,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:45:10.105418",
      "feature_type": "arithmetic",
      "complexity": "complex",
      "relative_improvement": 1.2424794740012832,
      "impact_score": 0.12179245775312077
    },
    {
      "code": "# Create a new feature that combines fare, class, and family size into a sophisticated interaction term\ndf['SocioEconomicFactor'] = (\n    (df['Fare'] / df['Pclass']) * \n    (df['FamilySize'] + 1)  # Adding 1 to avoid multiplication by zero\n)\n\n# Normalize the new feature to ensure it captures relative socio-economic status\ndf['SocioEconomicFactor'] = (df['SocioEconomicFactor'] - df['SocioEconomicFactor'].mean()) / df['SocioEconomicFactor'].std()",
      "description": "Passengers' survival likelihood may be influenced not only by their individual characteristics but also by the socio-economic status inferred from their fare and class, combined with their family structure. By examining the interaction between fare, class, and family size, we can uncover complex patterns that indicate how social dynamics affected survival chances during the Titanic disaster.",
      "feature_name": "SocioEconomicFactor",
      "improvement": 0.0062314576740506444,
      "baseline_roc": 0.870097821070675,
      "enhanced_roc": 0.8763292787447257,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:45:23.829880",
      "feature_type": "ratio",
      "complexity": "complex",
      "relative_improvement": 0.7161789770238357,
      "impact_score": 0.07040937603815686
    },
    {
      "code": "# Create a new feature that combines family size and fare, then apply clustering to identify patterns\ndf['FamilySize'] = df['SibSp'] + df['Parch'] + 1  # Include the passenger themselves\ndf['SurvivalPotential'] = df['Fare'] / df['FamilySize']  # Normalize fare by family size\n\n# Apply KMeans clustering to group passengers based on their survival potential\nkmeans = KMeans(n_clusters=3, random_state=42)  # Choosing 3 clusters for simplicity\ndf['SurvivalGroup'] = kmeans.fit_predict(df[['FamilySize', 'SurvivalPotential']])\n\n# Drop the intermediate feature to keep the DataFrame clean\ndf.drop(columns=['FamilySize', 'SurvivalPotential'], inplace=True)",
      "description": "Passengers who traveled together in families or groups may have shared resources or support systems that influenced their survival chances. By analyzing the combination of family size and ticket fare, we can capture the notion of \"survival potential\" based on socio-economic status and social support, which may correlate with survival outcomes.",
      "feature_name": "SurvivalGroup",
      "improvement": 0.006763622428797689,
      "baseline_roc": 0.8550327993143458,
      "enhanced_roc": 0.8617964217431435,
      "dataset_hash": "870b2c45c25b",
      "dataset_context": "Titanic passenger survival prediction dataset. \n    Features include passenger class, demographics (sex, age), \n    family information (siblings/spouses, parents/children), \n    ticket fare, and embarkation port.\n    Goal: Predict whether a passenger survived the disaster.",
      "dataset_size": 623,
      "dataset_features": 8,
      "timestamp": "2025-07-13T17:51:02.731627",
      "feature_type": "ratio",
      "complexity": "complex",
      "relative_improvement": 0.7910366051713413,
      "impact_score": 0.07744125838795195
    }
  ]
}